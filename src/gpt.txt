// This program is a way to create trails with an accompanying playlist. Each playlist has a marker on the map
// that, when clicked, displays the playlist's title and description. The button on the popup will display a
// component that shows the playlist's songs and a play button. When the play button is clicked the songs will
// play in order and instead of the markers a trail will be shown on the map with a new component to control play and pause.
// I dont want to keep reloading the map so I will need a state to keep track of the markers and the path.
// I need to make the components for the playlist and the controls.
// How should I structure this to be as flexible as possible? In the future I would like a database with all
// the information and data for each trail, like startposition, name and description, the playlist and the trail points.

// app.js

import React, { useState, useEffect } from 'react';
import SpotifyButton from './components/Login/SpotifyButton';
import MapView from './components/MapView/MapView';
import TopBarMessage from './components/common/TopBarMessage';
import RoundedButton from './components/common/RoundedButton';
import WalkListCreator from './components/WalkListCreator/WalkListCreator';
import Recording from './components/WalkListCreator/Recording';
import SaveWalkList from './components/WalkListCreator/SaveWalkList';
import WalkListDetails from './components/WalkListDetails/WalkListDetails';

// ...other imports

const App = () => {
  const [isLoggedIn, setIsLoggedIn] = useState(false);
  const [showTopBarMessage, setShowTopBarMessage] = useState(true);
  const [topBarMessage, setTopBarMessage] = useState('Choose a walk-list'); // New state for managing top bar message
  const [currentView, setCurrentView] = useState('default');

  const handleLogin = () => {
    setIsLoggedIn(true);
  };

  const handleCreateWalkList = () => {
    setCurrentView('createWalkList');
    setTopBarMessage('New walk-list'); // Update the top bar message accordingly
  };

  const handleViewDetails = () => {
    setCurrentView('viewDetails');
    setTopBarMessage('Viewing walk-list details'); // Update the top bar message accordingly
  };

  const handleStartRecording = () => {
    setCurrentView('recording'); // Add this new case
    setTopBarMessage('All of me | John Legend'); // Optional: Update the top bar message accordingly
  };

  const handleSaveWalkList = () => {
    setCurrentView('saveWalkList');
    setTopBarMessage('Save walk-list'); // Update the top bar message accordingly
  }

  const handleReturnToDefault = () => {
    setCurrentView('default');
    setTopBarMessage('Choose a walk-list'); // Reset the top bar message to default
  }

  // Add a new useEffect hook to listen for the 'Escape' key
  // This will reset the current view to default when the 'Escape' key is pressed
  useEffect(() => {
    const handleKeyDown = (event) => {
      if (event.key === 'Escape') {
        // Reset to default state
        setCurrentView('default');
        setShowTopBarMessage(true);
        setTopBarMessage('Choose a walk-list'); // Reset the top bar message to default
      }
    };

    // Add event listener
    window.addEventListener('keydown', handleKeyDown);

    // Clean up event listener
    return () => {
      window.removeEventListener('keydown', handleKeyDown);
    };
  }, []);


  // Update the renderCurrentView function to include the new view
  // This function will render the appropriate view based on the current view state
  const renderCurrentView = () => {
    switch (currentView) {
      case 'createWalkList':
        return <WalkListCreator onStartRecording={handleStartRecording} />;
      case 'viewDetails':
        return <WalkListDetails />;
      case 'recording':
        return <Recording onDoneRecording={handleSaveWalkList}/>;
      case 'saveWalkList':
        return <SaveWalkList onSaved={handleReturnToDefault}/>;
      default:
        return <RoundedButton text="Create new walk-list" onClick={handleCreateWalkList} />;
    }
  };

  return (
    <div className="app flex flex-col h-screen overflow-hidden">
      {!isLoggedIn ? (
        <SpotifyButton onLogin={handleLogin} />
      ) : (
        <>
          {showTopBarMessage && <TopBarMessage text={topBarMessage} />}
          <div className="flex-grow relative z-10">
            <MapView />
            {renderCurrentView()}
          </div>
        </>
      )}
    </div>
  );
};

export default App;

//MapView.js

import React, { useState } from 'react';
import { MapContainer, TileLayer } from 'react-leaflet';
import 'leaflet/dist/leaflet.css';
import CustomMarker from './CustomMarker';

const MapView = () => {
  const [markers, setMarkers] = useState([
    { position: [55.6861, 12.5732], title: "My First Date <33", description: "Some description of the list..." },
    { position: [55.68641927777803, 12.57480489592852], title: "My favorite songs", description: "My favorite songs" },
    { position: [55.68596341943917, 12.572184547362607], title: "Our kiss", description: "This walklist is dedicated to our first kiss" },
    { position: [55.68529715538475, 12.573172037771718], title: "Songs of romance", description: "A collection of romantic songs" },

    // Add more markers here
  ]);
  const [showPath, setShowPath] = useState(false);

  const togglePathVisibility = () => {
    setShowPath(!showPath);
    // Logic to dynamically hide markers or show the path
  };

  return (
    <MapContainer center={[55.6861, 12.5732]} zoom={20} style={{ height: '100%', width: '100%' }}>
      <TileLayer url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png" />
      {markers.map((marker, index) => (
        <CustomMarker
          key={index}
          position={marker.position}
          title={marker.title}
          description={marker.description}
          onButtonClick={togglePathVisibility}
        />
      ))}
      {/* Conditionally render path here based on `showPath` */}
    </MapContainer>
  );
};

export default MapView;

//CustomMarker

import React from 'react';
import { Marker, Popup } from 'react-leaflet';
import L from 'leaflet';
import nodeImage from '../Images/MusicNode.png'; // Ensure this path is correct

const customIcon = new L.Icon({
  iconUrl: nodeImage,
  iconSize: [35, 35],
  iconAnchor: [17, 35],
  popupAnchor: [0, -35],
});

const CustomMarker = ({ position, title, description, onButtonClick }) => (
  <Marker position={position} icon={customIcon}>
    <Popup>
      <div className="text-center text-gray-800">
        <strong>{title}</strong> <br /> {description}. <br />
        <button
          className="mt-2 bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded-full"
          onClick={onButtonClick}
        >
          See walklist
        </button>
      </div>
    </Popup>
  </Marker>
);

export default CustomMarker;
